#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require("fs");
var app = require('../src/app');
var config = require('../src/config/app.config');
var debug = require('debug')(`${config.APP_NAME}:server`);
var schema = config.SERVER.schema;
var serverBuilder = 
  config.SERVER.schema === 'http' 
    ? require('http') 
    : require('https');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.SERVER.port);
app.set('port', port);

/**
 * Create server.
 */
var option = {
  cert: 
    config.SERVER.cert && config.SERVER.cert !== '' 
      ? fs.readFileSync(config.SERVER.cert)
      : '',
  key: 
    config.SERVER.cert && config.SERVER.cert !== '' 
      ? fs.readFileSync(config.SERVER.cert_key)
      : ''
};
var server = 
  config.SERVER.schema === 'http' 
  ? serverBuilder.createServer(app)
  : serverBuilder.createServer(option, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for serverBuilder server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for serverBuilder server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
